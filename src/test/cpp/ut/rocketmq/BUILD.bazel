#
# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to You under the Apache License, Version 2.0
# (the "License"); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
# 
#     http://www.apache.org/licenses/LICENSE-2.0
# 
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
load("@rules_cc//cc:defs.bzl", "cc_test", "cc_library")

cc_test(
    name = "message_group_queue_selector_test",
    srcs = [
        "MessageGroupQueueSelectorTest.cpp",
    ],
    deps = [
        "//src/main/cpp/rocketmq:rocketmq_library",
        "@com_google_googletest//:gtest_main",
    ]
)

cc_test(
    name = "executor_test",
    srcs = [
        "ExecutorTest.cpp",
    ],
    deps = [
        "//api:rocketmq_interface",
        "@com_google_googletest//:gtest_main",
    ],
)

cc_test(
    name = "message_test",
    srcs = [
        "MessageTest.cpp",
    ],
    deps = [
        "//src/main/cpp/rocketmq:rocketmq_library",
        "@com_google_googletest//:gtest_main",
    ],
)

cc_test(
    name = "process_queue_test",
    srcs = [
        "ProcessQueueTest.cpp",
    ],
    deps = [
        "//src/main/cpp/client/mocks:client_mocks",
        "//src/main/cpp/rocketmq/mocks:rocketmq_mocks",
        "//src/main/cpp/rocketmq:rocketmq_library",
        "@com_google_googletest//:gtest_main",
    ],
)

cc_library(
    name = "client_interface",
    hdrs = [
       "include/MQClientTest.h",
    ],
    srcs = [],
    strip_include_prefix = "//src/test/cpp/ut/rocketmq/include",
    deps = [
        "//src/main/cpp/client/mocks:client_mocks",
        "@com_google_googletest//:gtest_main",
    ],
)

cc_test(
    name = "default_mq_producer_test",
    srcs = [
        "DefaultMQProducerTest.cpp",
    ],
    deps = [
        ":client_interface",
        "//src/main/cpp/admin:admin_server_library",
        "//src/main/cpp/rocketmq:rocketmq_library",
    ],
)

cc_test(
    name = "ut_credentials_provider",
    srcs = [
        "CredentialsProviderTest.cpp",
    ],
    deps = [
         "//src/main/cpp/rocketmq:rocketmq_library",
         "@com_google_googletest//:gtest_main",
    ],
)

cc_test(
    name = "ut_send_callbacks",
    srcs = [
        "SendCallbacksTest.cpp",
    ],
    deps = [
        "//src/main/cpp/rocketmq:rocketmq_library",
         "@com_google_googletest//:gtest_main",
    ],
)

cc_test(
    name = "sts_credentials_provider_test",
    srcs = [
        "StsCredentialsProviderImplTest.cpp",
    ],
    deps = [
        "//src/main/cpp/base/mocks:base_mocks",
        "//src/main/cpp/rocketmq:rocketmq_library",
        "@com_google_googletest//:gtest_main",
    ],
)

cc_test(
    name = "filter_expression_test",
    srcs = [
        "FilterExpressionTest.cpp",
    ],
    deps = [
        "//src/main/cpp/rocketmq:rocketmq_library",
        "@com_google_googletest//:gtest_main",
    ],
)

cc_test(
    name = "consume_message_service_test",
    srcs = [
        "ConsumeStandardMessageServiceTest.cpp",
    ],
    deps = [
        "//src/main/cpp/rocketmq:rocketmq_library",
        "//src/main/cpp/rocketmq/mocks:rocketmq_mocks",
        "//src/main/cpp/base/mocks:base_mocks",
        "@com_google_googletest//:gtest_main",
    ],
)

cc_test(
    name = "consumer_test",
    srcs = [
        "ConsumerTest.cpp",
    ],
    deps = [
        "//src/main/cpp/rocketmq/mocks:rocketmq_mocks",
        "@com_google_googletest//:gtest_main",
    ],
)

cc_test(
    name = "await_pull_callback_test",
    srcs = [
        "AwaitPullCallbackTest.cpp",
    ],
    deps = [
        "//src/main/cpp/rocketmq:rocketmq_library",
        "@com_google_googletest//:gtest_main",
    ]
)

cc_test(
    name = "push_consumer_impl_test",
    srcs = [
        "PushConsumerImplTest.cpp",
    ],
    deps = [
        "//src/main/cpp/client/mocks:client_mocks",
        "//src/main/cpp/rocketmq:rocketmq_library",
        "@com_google_googletest//:gtest_main",
    ]
)

cc_test(
    name = "producer_impl_test",
    srcs = [
        "ProducerImplTest.cpp",
    ],
    deps = [
        "//src/main/cpp/client/mocks:client_mocks",
        "//src/main/cpp/rocketmq:rocketmq_library",
        "@com_google_googletest//:gtest_main",
    ],
)

cc_test(
    name = "pull_consumer_impl_test",
    srcs = [
        "PullConsumerImplTest.cpp",
    ],
    deps = [
        "//src/main/cpp/client/mocks:client_mocks",
        "//src/main/cpp/rocketmq:rocketmq_library",
        "@com_google_googletest//:gtest_main",
    ]
)

cc_test(
    name = "client_impl_test",
    srcs = [
        "ClientImplTest.cpp",
    ],
    deps = [
        "//src/main/cpp/base/mocks:base_mocks",
        "//src/main/cpp/client/mocks:client_mocks",
        "//src/main/cpp/rocketmq:rocketmq_library",
        "//src/main/cpp/rocketmq/mocks:rocketmq_mocks",
        "@com_google_googletest//:gtest_main",
    ],
)

cc_test(
    name = "static_name_server_resolver_test",
    srcs = [
        "StaticNameServerResolverTest.cpp",
    ],
    deps = [
        "//src/main/cpp/rocketmq:rocketmq_library",
        "@com_google_googletest//:gtest_main",
    ],
)


cc_test(
    name = "dynamic_name_server_resolver_test",
    srcs = [
        "DynamicNameServerResolverTest.cpp",
    ],
    deps = [
        "//src/main/cpp/rocketmq:rocketmq_library",
        "//src/main/cpp/base/mocks:base_mocks",
        "@com_google_googletest//:gtest_main",
    ],
)

cc_test(
    name = "default_mq_push_consumer_test",
    srcs = [
        "DefaultMQPushConsumerTest.cpp",
    ],
    deps = [
        "//src/main/cpp/rocketmq:rocketmq_library",
        "@com_google_googletest//:gtest_main",
    ],
)

cc_test(
    name = "naming_scheme_test",
    srcs = [
        "NamingSchemeTest.cpp",
    ],
    deps = [
        "//src/main/cpp/rocketmq:rocketmq_library",
        "@com_google_googletest//:gtest_main",
    ],
)